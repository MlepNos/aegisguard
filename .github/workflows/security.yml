name: "Schritt 7: Security-Tooling/CI - Semgrep (SARIF), Trivy FS+Image (SARIF)"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write    # wichtig für SARIF Upload ins Security-Tab

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  semgrep-sast:
    name: Semgrep SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          # optional: mehrere Konfigurationen möglich (jede Zeile eine Config)
          config: |
            semgrep.yml
            # p/owasp-top-ten
            # p/secrets
            # r/csharp
            # r/javascript
          generate-sarif: true
          sarif_report: semgrep.sarif
        env:
          SEMGREP_ENABLE_VERSION_CHECK: "0"
          # falls du ein Semgrep App Token hast:
          # SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep


  trivy-fs:
    name: Trivy FS scan (Repo)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy FS
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          exit-code: '0'         # Findings -> keine roten Jobs

      - name: Upload Trivy FS SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

  

  # --- OPTIONAL: ZAP Baseline (erst aktivieren, wenn Ziel-URL steht) ---
  # zap-baseline:
  #   name: OWASP ZAP Baseline (optional)
  #   runs-on: ubuntu-latest
  #   needs: [ semgrep-sast, trivy-fs ]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Run ZAP Baseline
  #       uses: zaproxy/action-baseline@v0.12.0
  #       with:
  #         target: "http://localhost:5270"   # deine App-URL (öffentlich erreichbar!)
  #         rules_file_name: '.zap/rules.tsv'
  #         cmd_options: '-a'                 # aktivere Checks
  #       continue-on-error: true





#    trivy-image:
#      name: Trivy Image scan (Docker)
#      runs-on: ubuntu-latest
#      needs: [ trivy-fs ]
#      continue-on-error: true     # bei Findings nicht rot werden
#      env:
#       IMAGE_NAME: aegisguard-backend:ci
#        IMAGE_CONTEXT: backend          # Pfad zu deinem Dockerfile-Kontext
#        DOCKERFILE: backend/Dockerfile  # Pfad zur Dockerfile
#      steps:
#        - name: Checkout
#          uses: actions/checkout@v4
#
#        - name: Build backend image
#          run: |
#            docker build -t $IMAGE_NAME -f "$DOCKERFILE" "$IMAGE_CONTEXT"
#
#        - name: Scan image with Trivy
#          uses: aquasecurity/trivy-action@0.24.0
#          with:
#            image-ref: ${ env.IMAGE_NAME }
#            format: 'sarif'
#            output: 'trivy-image.sarif'
#            ignore-unfixed: true
#            vuln-type: 'os,library'
#            severity: 'CRITICAL,HIGH,MEDIUM,LOW'
#            exit-code: '0'     # Findings -> Report, aber kein Fail
#
#        - name: Upload Trivy Image SARIF
#          uses: github/codeql-action/upload-sarif@v3
#          with:
#            sarif_file: trivy-image.sarif
#            category: trivy-image