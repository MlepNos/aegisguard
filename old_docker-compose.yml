name: aegisguard-dev

services:
  db:
    image: postgres:16-alpine
    container_name: aegisguard_db
    restart: unless-stopped
    ports: ["5432:5432"]
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 20
    volumes:
      - db_data:/var/lib/postgresql/data

  backend:
    container_name: aegisguard_backend
    build:
      context: .                                   # <- repo root so Docker sees all projects
      dockerfile: ./backend/AegisGuard.Api/Dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ConnectionStrings__Default: ${DB_CONNECTION}  # Host=db;Port=5432;...
    ports:
      - "5080:8080"

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: aegisguard_pgadmin
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    ports: ["5050:80"]
    env_file: .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}

  api:  # this is your Blazor UI
    container_name: aegisguard_api
    build:
      context: .
      dockerfile: ./frontend/AegisGuard.Blazor/Dockerfile
    depends_on:
      backend:
        condition: service_started
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://0.0.0.0:5270
      # Point UI to backend by service name+port
      ApiBaseUrl: http://backend:8080/
    ports: ["5270:5270"]

volumes:
  db_data: