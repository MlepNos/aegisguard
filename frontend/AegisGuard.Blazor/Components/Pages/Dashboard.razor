@page "/dashboard"
@rendermode InteractiveServer
@using System.Net.Http.Json
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Nav
@inject IJSRuntime JS

<h3 class="mb-3">AegisGuard – Security Dashboard</h3>

<!-- Formular: neuen Log erstellen -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Neuen Log erstellen</h5>

        <div class="row g-3">
            <div class="col-md-3">
                <label class="form-label">Source</label>
                <input class="form-control" @bind="_newLog.source" placeholder="z.B. zap, trivy" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Severity</label>
                <select class="form-select" @bind="_newLog.severity">
                    <option>Info</option>
                    <option>Warning</option>
                    <option>High</option>
                    <option>Critical</option>
                </select>
            </div>
            <div class="col-md-6">
                <label class="form-label">Message</label>
                <input class="form-control" @bind="_newLog.message" placeholder="Kurze Beschreibung" />
            </div>
            <div class="col-12">
                <label class="form-label">Metadata (JSON optional)</label>
                <input class="form-control" @bind="_newLog.metadata" placeholder='{"url":"/test"}' />
            </div>
        </div>

        <div class="mt-3">
            <button class="btn btn-success me-2" @onclick="SubmitLog" disabled="@_submitting">Erstellen</button>
            <button class="btn btn-outline-secondary" @onclick="ResetForm" disabled="@_submitting">Reset</button>
            @if (!string.IsNullOrWhiteSpace(_formMsg))
            {
                <span class="ms-3">@_formMsg</span>
            }
        </div>
    </div>
</div>

<!-- Refresh / Auto-Refresh -->
<div class="mb-3 d-flex align-items-center gap-3">
    <button class="btn btn-primary" @onclick="LoadData">Refresh</button>

    <div class="form-check form-switch">
        <input id="autorf" class="form-check-input" type="checkbox" @bind="_autoRefresh" />
        <label class="form-check-label" for="autorf">Auto-Refresh (@(_autoRefresh ? "On" : "Off"))</label>
    </div>

    <div class="d-flex align-items-center gap-2">
        <label class="form-label m-0">Filter:</label>
        <select class="form-select form-select-sm" style="width: 160px" @bind="_filterSeverity">
            <option value="">(alle)</option>
            <option>Info</option>
            <option>Warning</option>
            <option>High</option>
            <option>Critical</option>
        </select>
    </div>
</div>

@if (_loading)
{
    <p>Loading…</p>
}
else
{
    <div class="row g-4">
        <div class="col-md-4">
            <h5>Stats by Severity</h5>
            <ul class="mb-3">
                @foreach (var s in _stats)
                {
                    <li><strong>@s.severity</strong>: @s.count</li>
                }
            </ul>

            <!-- Chart -->
            <div class="card">
                <div class="card-body">
                    <canvas id="sevChart" height="180"></canvas>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <h5>Recent Logs (@_logs.Count)</h5>
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Time (UTC)</th>
                        <th>Source</th>
                        <th>Severity</th>
                        <th>Message</th>
                        <th>Metadata</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var l in _logs
                        .Where(x => string.IsNullOrEmpty(_filterSeverity) || x.severity == _filterSeverity)
                        .OrderByDescending(x => x.timestamp)
                        .Take(50))
                    {
                        <tr>
                            <td>@l.timestamp?.ToString("u")</td>
                            <td>@l.source</td>
                            <td>@RenderSeverityBadge(l.severity)</td>
                            <td>@l.message</td>
                            <td><code>@l.metadata</code></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    // ----------------- Modelle -----------------
    public class SecurityLogDto
    {
        public string? source { get; set; }
        public string? severity { get; set; }
        public string? message { get; set; }
        public string? metadata { get; set; }
        public DateTime? timestamp { get; set; }
    }

    public class LogStat
    {
        public string severity { get; set; } = "";
        public int count { get; set; }
    }

    public class NewLogModel
    {
        public string? source { get; set; } = "zap";
        public string? severity { get; set; } = "Warning";
        public string? message { get; set; } = "";
        public string? metadata { get; set; } = "";
    }

    // ----------------- State -----------------
    List<SecurityLogDto> _logs = new();
    List<LogStat> _stats = new();
    bool _loading = true;
    bool _autoRefresh = true;
    PeriodicTimer? _timer;
    string _filterSeverity = "";
    NewLogModel _newLog = new();
    bool _submitting = false;
    string? _formMsg;

    // Chart
    IJSObjectReference? _chartsModule;
    bool _shouldRenderChart;
    string[] _chartLabels = Array.Empty<string>();
    int[] _chartCounts = Array.Empty<int>();

    // API client (reused)
    HttpClient? _api;

    // ----------------- Lifecycle -----------------
    protected override async Task OnInitializedAsync()
    {
        _api = HttpClientFactory.CreateClient("Api");
        //_api.BaseAddress ??= new Uri(Nav.BaseUri);   // set once for relative URLs

        _timer = new PeriodicTimer(TimeSpan.FromSeconds(5));
        _ = AutoRefreshLoop();
        await LoadData();
    }

    async Task AutoRefreshLoop()
    {
        while (_timer != null && await _timer.WaitForNextTickAsync())
        {
            if (_autoRefresh) await LoadData();
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chartsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/dashboard-charts.js");
        }

        if ((firstRender || _shouldRenderChart)
            && _chartsModule is not null
            && _chartLabels.Length > 0)
        {
            _shouldRenderChart = false;
            await _chartsModule.InvokeVoidAsync("renderBarChart", "sevChart", _chartLabels, _chartCounts);
        }
    }

    // ----------------- Data -----------------
    async Task LoadData()
    {
        try
        {
            _loading = true;
            _logs  = await _api!.GetFromJsonAsync<List<SecurityLogDto>>("/api/logs")        ?? new();
            _stats = await _api!.GetFromJsonAsync<List<LogStat>>("/api/logs/stats")         ?? new();

            _chartLabels = _stats.Select(s => s.severity).ToArray();
            _chartCounts = _stats.Select(s => s.count).ToArray();

            _shouldRenderChart = true;
            StateHasChanged();
        }
        finally { _loading = false; }
    }

    // ----------------- Form Actions -----------------
    async Task SubmitLog()
    {
        if (string.IsNullOrWhiteSpace(_newLog.source)
         || string.IsNullOrWhiteSpace(_newLog.severity)
         || string.IsNullOrWhiteSpace(_newLog.message))
        {
            _formMsg = "Bitte Source, Severity und Message ausfüllen.";
            return;
        }

        try
        {
            _submitting = true;
            _formMsg = null;

            var resp = await _api!.PostAsJsonAsync("/api/logs", _newLog);

            if (resp.IsSuccessStatusCode)
            {
                _formMsg = "✅ Log gespeichert.";
                ResetForm();
                await LoadData();
            }
            else
            {
                _formMsg = $"❌ Fehler: {resp.StatusCode} - {await resp.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            _formMsg = "❌ Ausnahme: " + ex.Message;
        }
        finally { _submitting = false; }
    }

    void ResetForm() => _newLog = new();

    // ----------------- UI helpers -----------------
    MarkupString RenderSeverityBadge(string? sev)
    {
        var (cls, txt) = sev switch
        {
            "Critical" => ("badge bg-danger", "Critical"),
            "High"     => ("badge bg-warning text-dark", "High"),
            "Warning"  => ("badge bg-info text-dark", "Warning"),
            _          => ("badge bg-secondary", "Info")
        };
        return new MarkupString($"<span class=\"{cls}\">{txt}</span>");
    }
}
